// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// CreatePostRequest defines model for CreatePostRequest.
type CreatePostRequest struct {
	Body  string `json:"body"`
	Title string `json:"title"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Post defines model for Post.
type Post struct {
	Body  *string `json:"body,omitempty"`
	Id    string  `json:"id"`
	Title *string `json:"title,omitempty"`
}

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody = CreatePostRequest

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SVzW7rNhCFX4WYdqkb+d50pVXTOgHcTYwmQBeNF2NxLDGVSIYcOTEMvXtBUraCSmga",
	"GG1XlvlzhvOd4fAIpWmt0aTZQ3EEX9bUYvz82REyrY3nX+mlI89h0DpjybGiuGRr5CH88sESFODZKV1B",
	"nwErbmhmps/A0UunHEkofh+WZUln02dw65xx0zilkVFtZ1yLDAUozdffIDvJK81UkQuRW/Ieq38QO2qO",
	"6zdnMbN9ppKDVsj9E0kreQkLJWETxjyVnVN8eAhODBEJHbmbjuvx390JxS+/PUKWfAvqaXZEUzNb6IOw",
	"0juTYGrGMiZGLaoGCkCrmLD90b9iVZG7UgYy0BgFH9KYuFmvxCNhCxl0rhmUizx/t6fPQJIvnbKsjIYC",
	"Hu+X9+Eo5Fp/v3sgt1clzW3N45IczrTOYSvz5ZW2X/wf1BAbDRnsyfkk//VqcbUIUY0ljVZBAddxKAOL",
	"XEd2uQ2wiyNUFFOeHvApiAaDMQyuJBSwDnuCPd4a7ZMJ3xaLEz3SUQqtbVQZd+XPPuid7s+c2xM4bOSA",
	"bIddw58S/97RDgrdNc2McKfpzVLJJAXF+xTLqmtbdIcxOcbKh7qLfGLl5db41AVmWdEbtrahJz39mAC8",
	"U1quo9qFFBVT68eM4bt87Ff50KzyeE/7c8mjc3iYIx7zE6fz/Ffs+ywGvgzo2IwhtQ3y/NPQiD558nmG",
	"024/k12YFmwESgnvuxe7jvoLnf7Y4H/X0PnIt6OJHxt9vkP5Uck+Gd4Q09T6NO4FCq901ZAI28QWPUlh",
	"tOCaxGopfBfOTXJSDcu4fagGiw5bYnLhOv810GopzC6psxHDccJbEOgh12OfV1NLs79pZ5uJ3T9M04xx",
	"U1D5f7vzvgUuz/iZPA/wD2K1TFqe3P6Ec3zrfJHnx9p4DsD6HK3K91/De4RO4bZJGE7zicWQLTSmxKaO",
	"/bDv+03/ZwAAAP//85UMUXYJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
